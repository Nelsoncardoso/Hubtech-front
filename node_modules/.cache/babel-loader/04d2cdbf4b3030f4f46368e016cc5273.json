{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nelsoncardoso/Downloads/bootcamp-gobarber-frontend-master/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nelsoncardoso/Downloads/bootcamp-gobarber-frontend-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addTask);\n\nimport { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from \"../../../services/api\";\nimport { addTaskRequestSuccess, addTaskRequestFailure } from './actions';\nimport session from \"../../../helpers/session\";\nexport function addTask(_ref) {\n  var payload, apiCall, response;\n  return _regeneratorRuntime.wrap(function addTask$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref.payload;\n\n          apiCall =\n          /*#__PURE__*/\n          function () {\n            var _ref2 = _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee(data) {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      return _context.abrupt(\"return\", api.post('/task', data, {\n                        headers: session.get()\n                      }).then(function (response) {\n                        return response.data;\n                      }));\n\n                    case 1:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            return function apiCall(_x) {\n              return _ref2.apply(this, arguments);\n            };\n          }();\n\n          _context2.prev = 2;\n          console.log('saga');\n          _context2.next = 6;\n          return call(apiCall(payload.data));\n\n        case 6:\n          response = _context2.sent;\n          toast.success('Tarefa adicionada com sucesso!');\n          _context2.next = 10;\n          return put(addTaskRequestSuccess(response.data));\n\n        case 10:\n          _context2.next = 17;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](2);\n          toast.success('Erro ao cadastrar nova tarefa, tente novamente!');\n          _context2.next = 17;\n          return put(addTaskRequestFailure());\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[2, 12]]);\n}\nexport default all([takeLatest('@task/ADD_TASK_REQUEST', addTask)]);","map":{"version":3,"sources":["/Users/nelsoncardoso/Downloads/bootcamp-gobarber-frontend-master/src/store/modules/task/sagas.js"],"names":["addTask","takeLatest","call","put","all","toast","api","addTaskRequestSuccess","addTaskRequestFailure","session","payload","apiCall","data","post","headers","get","then","response","console","log","success"],"mappings":";;;;;yBAQiBA,O;;AARjB,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,qBAAT,EAAgCC,qBAAhC,QAA6D,WAA7D;AACA,OAAOC,OAAP,MAAoB,0BAApB;AAEA,OAAO,SAAUT,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoBU,UAAAA,OAApB,QAAoBA,OAApB;;AACCC,UAAAA,OADD;AAAA;AAAA;AAAA;AAAA;AAAA,qCACW,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA,uDACPN,GAAG,CAACO,IAAJ,CAAS,OAAT,EAAkBD,IAAlB,EAAwB;AAC7BE,wBAAAA,OAAO,EAAEL,OAAO,CAACM,GAAR;AADoB,uBAAxB,EAEJC,IAFI,CAEC,UAAAC,QAAQ;AAAA,+BAAIA,QAAQ,CAACL,IAAb;AAAA,uBAFT,CADO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADX;;AAAA,4BACCD,OADD;AAAA;AAAA;AAAA;;AAAA;AAOHO,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAPG;AASc,iBAAMjB,IAAI,CAACS,OAAO,CAACD,OAAO,CAACE,IAAT,CAAR,CAAV;;AATd;AASGK,UAAAA,QATH;AAWHZ,UAAAA,KAAK,CAACe,OAAN,CAAc,gCAAd;AAXG;AAYH,iBAAMjB,GAAG,CAACI,qBAAqB,CAACU,QAAQ,CAACL,IAAV,CAAtB,CAAT;;AAZG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcHP,UAAAA,KAAK,CAACe,OAAN,CAAc,iDAAd;AAdG;AAeH,iBAAMjB,GAAG,CAACK,qBAAqB,EAAtB,CAAT;;AAfG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBP,eAAeJ,GAAG,CAAC,CAACH,UAAU,CAAC,wBAAD,EAA2BD,OAA3B,CAAX,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport api from '~/services/api';\n\nimport { addTaskRequestSuccess, addTaskRequestFailure } from './actions';\nimport session from '~/helpers/session';\n\nexport function* addTask({ payload }) {\n  const apiCall = async data => {\n    return api.post('/task', data, {\n      headers: session.get(),\n    }).then(response => response.data);\n  };\n  try {\n    console.log('saga');\n\n    const response = yield call(apiCall(payload.data));\n\n    toast.success('Tarefa adicionada com sucesso!');\n    yield put(addTaskRequestSuccess(response.data));\n  } catch (err) {\n    toast.success('Erro ao cadastrar nova tarefa, tente novamente!');\n    yield put(addTaskRequestFailure());\n  }\n}\n\nexport default all([takeLatest('@task/ADD_TASK_REQUEST', addTask)]);\n"]},"metadata":{},"sourceType":"module"}