{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport history from \"../../../services/history\";\nimport api from \"../../../services/api\";\nimport { signInSuccess, signFailure } from './actions';\nexport function* signIn({\n  payload\n}) {\n  try {\n    const email = payload.email,\n          password = payload.password;\n    const response = yield call(api.post, '/auth/sign_in', {\n      email,\n      password\n    });\n\n    if (response.status != 200) {\n      toast.error('Não foi possivel logar, tente novamente.');\n      return;\n    }\n\n    api.defaults.headers = response.headers; // yield put(signInSuccess(response.headers['access-token'], response.data));\n\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Falha na autenticação, verifique seus dados');\n    yield put(signFailure());\n  }\n}\nexport function* signUp({\n  payload\n}) {\n  try {\n    const name = payload.name,\n          email = payload.email,\n          password = payload.password;\n    yield call(api.post, '/auth', {\n      name,\n      email,\n      password,\n      provider: true\n    });\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro, verifique seus dados');\n    yield put(signFailure());\n  }\n}\nexport function setToken({\n  payload\n}) {\n  if (!payload) return;\n  const token = payload.auth.token;\n\n  if (token) {\n    api.defaults.headers.Authorization = \"Bearer \".concat(token);\n  }\n}\nexport function signOut() {\n  history.push('/');\n}\nexport default all([takeLatest('persist/REHYDRATE', setToken), takeLatest('@auth/SIGN_IN_REQUEST', signIn), takeLatest('@auth/SIGN_UP_REQUEST', signUp), takeLatest('@auth/SIGN_OUT', signOut)]);","map":{"version":3,"sources":["/Users/nelsoncardoso/Downloads/bootcamp-gobarber-frontend-master/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","toast","history","api","signInSuccess","signFailure","signIn","payload","email","password","response","post","status","error","defaults","headers","push","err","signUp","name","provider","setToken","token","auth","Authorization","signOut"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,WAA3C;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AAAA,UACMC,KADN,GAC0BD,OAD1B,CACMC,KADN;AAAA,UACaC,QADb,GAC0BF,OAD1B,CACaE,QADb;AAGF,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACK,GAAG,CAACQ,IAAL,EAAW,eAAX,EAA4B;AACrDH,MAAAA,KADqD;AAErDC,MAAAA;AAFqD,KAA5B,CAA3B;;AAKA,QAAIC,QAAQ,CAACE,MAAT,IAAmB,GAAvB,EAA4B;AAC1BX,MAAAA,KAAK,CAACY,KAAN,CAAY,0CAAZ;AACA;AACD;;AAEDV,IAAAA,GAAG,CAACW,QAAJ,CAAaC,OAAb,GAAuBL,QAAQ,CAACK,OAAhC,CAbE,CAeF;;AAEAb,IAAAA,OAAO,CAACc,IAAR,CAAa,YAAb;AACD,GAlBD,CAkBE,OAAOC,GAAP,EAAY;AACZhB,IAAAA,KAAK,CAACY,KAAN,CAAY,6CAAZ;AACA,UAAMd,GAAG,CAACM,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,UAAUa,MAAV,CAAiB;AAAEX,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AAAA,UACMY,IADN,GACgCZ,OADhC,CACMY,IADN;AAAA,UACYX,KADZ,GACgCD,OADhC,CACYC,KADZ;AAAA,UACmBC,QADnB,GACgCF,OADhC,CACmBE,QADnB;AAGF,UAAMX,IAAI,CAACK,GAAG,CAACQ,IAAL,EAAW,OAAX,EAAoB;AAC5BQ,MAAAA,IAD4B;AAE5BX,MAAAA,KAF4B;AAG5BC,MAAAA,QAH4B;AAI5BW,MAAAA,QAAQ,EAAE;AAJkB,KAApB,CAAV;AAOAlB,IAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD,GAXD,CAWE,OAAOC,GAAP,EAAY;AACZhB,IAAAA,KAAK,CAACY,KAAN,CAAY,yCAAZ;AACA,UAAMd,GAAG,CAACM,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,SAASgB,QAAT,CAAkB;AAAEd,EAAAA;AAAF,CAAlB,EAA+B;AACpC,MAAI,CAACA,OAAL,EAAc;AADsB,QAG5Be,KAH4B,GAGlBf,OAAO,CAACgB,IAHU,CAG5BD,KAH4B;;AAKpC,MAAIA,KAAJ,EAAW;AACTnB,IAAAA,GAAG,CAACW,QAAJ,CAAaC,OAAb,CAAqBS,aAArB,oBAA+CF,KAA/C;AACD;AACF;AAED,OAAO,SAASG,OAAT,GAAmB;AACxBvB,EAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD;AAED,eAAehB,GAAG,CAAC,CACjBH,UAAU,CAAC,mBAAD,EAAsBwB,QAAtB,CADO,EAEjBxB,UAAU,CAAC,uBAAD,EAA0BS,MAA1B,CAFO,EAGjBT,UAAU,CAAC,uBAAD,EAA0BqB,MAA1B,CAHO,EAIjBrB,UAAU,CAAC,gBAAD,EAAmB4B,OAAnB,CAJO,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport history from '~/services/history';\nimport api from '~/services/api';\n\nimport { signInSuccess, signFailure } from './actions';\n\nexport function* signIn({ payload }) {\n  try {\n    const { email, password } = payload;\n\n    const response = yield call(api.post, '/auth/sign_in', {\n      email,\n      password,\n    });\n\n    if (response.status != 200) {\n      toast.error('Não foi possivel logar, tente novamente.');\n      return;\n    }\n\n    api.defaults.headers = response.headers;\n\n    // yield put(signInSuccess(response.headers['access-token'], response.data));\n\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Falha na autenticação, verifique seus dados');\n    yield put(signFailure());\n  }\n}\n\nexport function* signUp({ payload }) {\n  try {\n    const { name, email, password } = payload;\n\n    yield call(api.post, '/auth', {\n      name,\n      email,\n      password,\n      provider: true,\n    });\n\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro, verifique seus dados');\n    yield put(signFailure());\n  }\n}\n\nexport function setToken({ payload }) {\n  if (!payload) return;\n\n  const { token } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\n\nexport function signOut() {\n  history.push('/');\n}\n\nexport default all([\n  takeLatest('persist/REHYDRATE', setToken),\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn),\n  takeLatest('@auth/SIGN_UP_REQUEST', signUp),\n  takeLatest('@auth/SIGN_OUT', signOut),\n]);\n"]},"metadata":{},"sourceType":"module"}