{"ast":null,"code":"import _slicedToArray from \"/Users/nelsoncardoso/Downloads/bootcamp-gobarber-frontend-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nelsoncardoso/Downloads/bootcamp-gobarber-frontend-master/src/pages/Dashboard/index.js\";\nimport React, { useState, button, useEffect } from 'react';\nimport { setHours, setMinutes, setSeconds, isEqual, isBefore, parseISO } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { actions as ModalActions } from 'react-redux-modal-flex';\nimport api from \"../../services/api\";\nimport { Container, Time } from './styles';\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nexport default function Dashboard() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        schedule = _useState2[0],\n        setSchedule = _useState2[1];\n\n  const _useState3 = useState(new Date()),\n        _useState4 = _slicedToArray(_useState3, 1),\n        date = _useState4[0];\n\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('/tasks');\n      api.defaults.headers = response.headers;\n      console.log(response);\n      return;\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      const data = range.map(hour => {\n        const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n        return {\n          time: \"\".concat(hour, \":00h\"),\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a => isEqual(parseISO(a.date), compareDate))\n        };\n      });\n      setSchedule(response);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function AddTask() {}\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"Button\",\n    onClick: AddTask,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"ADICIONAR TAREFA\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, schedule.map(time => React.createElement(Time, {\n    key: time.time,\n    past: time.past,\n    available: !time.appointment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, time.time), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, time.appointment ? time.appointment.user.name : 'Em aberto')))));\n}","map":{"version":3,"sources":["/Users/nelsoncardoso/Downloads/bootcamp-gobarber-frontend-master/src/pages/Dashboard/index.js"],"names":["React","useState","button","useEffect","setHours","setMinutes","setSeconds","isEqual","isBefore","parseISO","utcToZonedTime","actions","ModalActions","api","Container","Time","range","Dashboard","schedule","setSchedule","Date","date","loadSchedule","response","get","defaults","headers","console","log","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","data","map","hour","checkDate","compareDate","time","past","appointment","find","a","AddTask","user","name"],"mappings":"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","sourcesContent":["import React, { useState, button, useEffect } from 'react';\nimport {\n  setHours,\n  setMinutes,\n  setSeconds,\n  isEqual,\n  isBefore,\n  parseISO,\n} from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport {actions as ModalActions} from 'react-redux-modal-flex';\n\nimport api from '~/services/api';\n\nimport { Container, Time } from './styles';\n\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nexport default function Dashboard() {\n  const [schedule, setSchedule] = useState([]);\n  const [date] = useState(new Date());\n\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('/tasks',);\n      api.defaults.headers = response.headers;\n      console.log(response);return;\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n      const data = range.map(hour => {\n        const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a =>\n            isEqual(parseISO(a.date), compareDate)\n          ),\n        };\n      });\n\n      setSchedule(response);\n    }\n    loadSchedule();\n  }, [date]);\n\n  function AddTask() {}\n\n  return (\n    <Container>\n      <button type=\"Button\" onClick={AddTask}>ADICIONAR TAREFA</button>\n\n      <ul>\n        {schedule.map(time => (\n          <Time key={time.time} past={time.past} available={!time.appointment}>\n            <strong>{time.time}</strong>\n            <span>\n              {time.appointment ? time.appointment.user.name : 'Em aberto'}\n            </span>\n          </Time>\n        ))}\n      </ul>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}