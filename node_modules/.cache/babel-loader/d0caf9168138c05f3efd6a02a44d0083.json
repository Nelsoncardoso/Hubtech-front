{"ast":null,"code":"import _slicedToArray from \"/Users/nelsoncardoso/Downloads/bootcamp-gobarber-frontend-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nelsoncardoso/Downloads/bootcamp-gobarber-frontend-master/src/pages/Dashboard/index.js\";\nimport React, { useState, button, useEffect } from 'react';\nimport { setHours, setMinutes, setSeconds, isEqual, isBefore, parseISO } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport Rodal from 'rodal';\nimport api from \"../../services/api\";\nimport { Container, Time } from './styles';\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nexport default function Dashboard() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        schedule = _useState2[0],\n        setSchedule = _useState2[1];\n\n  const _useState3 = useState(new Date()),\n        _useState4 = _slicedToArray(_useState3, 1),\n        date = _useState4[0];\n\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedule', {\n        params: {\n          date\n        }\n      });\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      const data = range.map(hour => {\n        const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n        return {\n          time: \"\".concat(hour, \":00h\"),\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a => isEqual(parseISO(a.date), compareDate))\n        };\n      });\n      setSchedule(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"Button\",\n    onClick: \"AddTark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"ADICIONAR TAREFA\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, schedule.map(time => React.createElement(Time, {\n    key: time.time,\n    past: time.past,\n    available: !time.appointment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, time.time), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, time.appointment ? time.appointment.user.name : 'Em aberto')))), React.createElement(Rodal, {\n    visible: this.state.visible,\n    onClose: this.hide.bind(this),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Content\")));\n}","map":{"version":3,"sources":["/Users/nelsoncardoso/Downloads/bootcamp-gobarber-frontend-master/src/pages/Dashboard/index.js"],"names":["React","useState","button","useEffect","setHours","setMinutes","setSeconds","isEqual","isBefore","parseISO","utcToZonedTime","Rodal","api","Container","Time","range","Dashboard","schedule","setSchedule","Date","date","loadSchedule","response","get","params","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","data","map","hour","checkDate","compareDate","time","past","appointment","find","a","user","name","state","visible","hide","bind"],"mappings":"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","sourcesContent":["import React, { useState, button, useEffect } from 'react';\nimport {\n  setHours,\n  setMinutes,\n  setSeconds,\n  isEqual,\n  isBefore,\n  parseISO,\n} from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport Rodal from 'rodal';\n\nimport api from '~/services/api';\n\nimport { Container, Time } from './styles';\n\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nexport default function Dashboard() {\n  const [schedule, setSchedule] = useState([]);\n  const [date] = useState(new Date());\n\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedule', {\n        params: { date },\n      });\n\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n      const data = range.map(hour => {\n        const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a =>\n            isEqual(parseISO(a.date), compareDate)\n          ),\n        };\n      });\n\n      setSchedule(data);\n    }\n    loadSchedule();\n  }, [date]);\n\n  return (\n    <Container>\n      <button type=\"Button\" onClick=\"AddTark\">ADICIONAR TAREFA</button>\n\n      <ul>\n        {schedule.map(time => (\n          <Time key={time.time} past={time.past} available={!time.appointment}>\n            <strong>{time.time}</strong>\n            <span>\n              {time.appointment ? time.appointment.user.name : 'Em aberto'}\n            </span>\n          </Time>\n        ))}\n      </ul>\n      <Rodal visible={this.state.visible} onClose={this.hide.bind(this)}>\n        <div>Content</div>\n      </Rodal>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}